CREATE TABLE HEIGHT_INFO AS
SELECT studno, NAME, HEIGHT 
FROM STUDENT
WHERE 1 = 0;
-- 크리에이트 테이블 하고 쿼리문 만드는 이유가 

CREATE TABLE WEIGHT_INFO AS
SELECT studno, NAME, HEIGHT WEIGHT 
FROM STUDENT
WHERE 1 = 0;

SELECT * FROM HEIGHT_INFO;
SELECT * FROM WEIGHT_INFO;

-- delete, drop 보다훨씬 더 빠르고 강력하지만 복구 불가 TRUNCATE
TRUNCATE TABLE HEIGHT_INFO;
TRUNCATE TABLE WEIGHT_INFO;

-- DDL 사용시, 혹은 트랜잭션을 활용할 때는 늘 주의할 것

-- HEIGHT INFO 에는 학번, 이름, 키 
-- WEIGHT INFO 에는 학번, 이름, 체중 

INSERT ALL
INTO HEIGHT_INFO(STUDNO, NAME, HEIGHT) VALUES(STUDNO, NAME, HEIGHT)
INTO WEIGHT_INFO(STUDNO, NAME, WEIGHT) VALUES(STUDNO, NAME, WEIGHT)
SELECT * FROM STUDENT s WHERE GRADE >= '2';


-- INSERT ALL CONDITIONAL 
-- 2학년 이상의 학생, HEIGHT_INFO
INSERT FIRST
WHEN HEIGHT >= 170 THEN -- IF
INTO  HEIGHT_INFO VALUES(STUDNO, NAME, HEIGHT)
WHEN WEIGHT >= 70 THEN -- ELSE IF
INTO  WEIGHT_INFO VALUES(STUDNO, NAME, WEIGHT)
SELECT * FROM STUDENT S WHERE GRADE >= '2';
INTO
	HEIGHT_INFO(STUDNO,
	NAME,
	HEIGHT)
VALUES(STUDNO,
NAME,
HEIGHT)
INTO
	WEIGHT_INFO(STUDNO,
	NAME,
	WEIGHT)
VALUES(STUDNO,
NAME,
WEIGHT)
SELECT
	*
FROM
	STUDENT s
WHERE
	GRADE >= '2';

-- PIVOTING
CREATE TABLE SALES(
	SALES_NO NUMBER,
	WEEK_NO NUMBER,
	SALES_MON NUMBER,
	SALES_TUE NUMBER,
	SALES_WED NUMBER,
	SALES_THU NUMBER,
	SALES_FRI NUMBER
);

CREATE TABLE SALES_DATA(
	SALES_NO NUMBER,
	WEEK_NO NUMBER,
	DAY_NO NUMBER,
	SALES NUMBER
);

TRUNCATE TABLE SALES;
TRUNCATE TABLE SALES_DATA ;

INSERT INTO SALES VALUES(1101, 4, 100, 150, 80, 60, 120);
INSERT INTO SALES VALUES(1102, 5, 300, 300, 230, 125, 150);

INSERT ALL
INTO SALES_DATA VALUES(SALES_NO, WEEK_NO, 1, SALES_MON)
INTO SALES_DATA VALUES(SALES_NO, WEEK_NO, 2, SALES_TUE)
INTO SALES_DATA VALUES(SALES_NO, WEEK_NO, 3, SALES_WED)
INTO SALES_DATA VALUES(SALES_NO, WEEK_NO, 4, SALES_THU)
INTO SALES_DATA VALUES(SALES_NO, WEEK_NO, 5, SALES_FRI)
SELECT * FROM SALES;

SELECT
	SALES_NO,
	WEEK_NO,
	DECODE(DAY_NO, 1, SALES) MON, 
	DECODE(DAY_NO, 2, SALES) TUE,
	DECODE(DAY_NO, 3, SALES) WED,
	DECODE(DAY_NO, 4, SALES) THU,
	DECODE(DAY_NO, 5, SALES) FRI
FROM
	SALES_DATA
GROUP BY
	SALES_NO,
	WEEK_NO
ORDER BY
	1;

-- 교수번호가 9903인 교수의 직급을 부교수로 수정
SELECT * FROM PROFESSOR WHERE PROFNO = 9903;

UPDATE
	PROFESSOR
SET 
	POSITION = '전임교수',
	USERID= 'LITPASCAL',
	SAL = SAL + 20
WHERE
	PROFNO = 9903;



-- 교수번호가 9903인 교수의 직급을 전임교수로, 아이디를 LITTLE - PASCAL로 수정해라.

SELECT 
FROM PROFESSOR

-- 컴퓨터공학과 소속 학생 데이터 삭제
DELETE 
FROM STUDENT 
WHERE DEPTNO = (
	SELECT DEPTNO FROM DEPARTMENT WHERE DNAME = '컴퓨터공학과'
);

CREATE TABLE T_STUDENT AS
SELECT * FROM STUDENT;

DROP TABLE STUDENT;

RENAME T_STUDENT TO STUDENT;

SELECT * FROM STUDENT s;


-- PROFESSOR_TEMP 테이블 생성, 교수 직급만 가져와서 생성

CREATE TABLE PROFESSOR_TMP AS
SELECT *
FROM PROFESSOR 
WHERE "POSITION" = '교수'

SELECT * FROM PROFESSOR;

UPDATE PROFESSOR_TMP SET POSITION = '명예교수';

INSERT INTO PROFESSOR_TMP
VALUES (9999, '남도일', 'CONAN', '탐정', 300, SYSDATE, 10, 101);


MERGE INTO PROFESSOR p --프로페서로 병합 
	USING PROFESSOR_TMP PT
	ON (P.PROFNO = PT.PROFNO)
WHEN MATCHED THEN 
	UPDATE SET P.POSITION = PT.POSITION
--UPDATE
WHEN NOT MATCHED THEN
	INSERT VALUES(PT.PROFNO, PT.NAME, PT.USERID, PT.POSITION, PT.SAL, PT.HIREDATE, PT.COMM, PT.DEPTNO); 